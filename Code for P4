### Project 4 by Harley, Lauren, Diego, and Linda
### This code will open and download a specified log file to answer the following questions:
    #How many requests were made on each day? 
    #How many requests were made on a week-by-week basis? Per month?
    #What percentage of the requests were not successful (any 4xx status code)?
    #What percentage of the requests were redirected elsewhere (any 3xx codes)?
    #What was the most-requested file?
    #What was the least-requested file?
####The code will then download the logs into separate files by month


#IMPORTANT THINGS TO RUN BEFORE RUNNING CODE: 
#Make sure that you have all necessary files downloaded
#Open your preferred terminal and run one of the following commands:

#IF you're using WINDOWS:
#py -m pip install requests
#pip install python-dateutil

#IF you're using MAC: 
#python3 -m pip install requests
#pip3 install python-dateutil

#IF you're using Linux:
#pip install requests
#pip install python-dateutil

#That code will allow you to run the request code to get and sort the file logs



import requests
from datetime import datetime
from datetime import timedelta
from datetime import date
import re
import os
import collections
from dateutil.relativedelta import relativedelta


if os.path.exists('python.txt') != True: 
    print("Downloading...")
    url = 'https://s3.amazonaws.com/tcmg476/http_access_log'
    r = requests.get(url, allow_redirects=True)

    with open("python.txt","wb") as textfile:
        for chunk in r.iter_content(chunk_size=1024):

    # writing to pdf file
            if chunk:
                textfile.write(chunk)
                result={"total_requests":0,}
    print("Download Complete!")

print("Extracting data...")

filesize = os.path.getsize('python.txt')
file = open("python.txt")
fakedate = 'local - - [12/Nov/1996:14:14:17 -0600] "GET index.html HTTP/1.0" 304 0'
with open("python.txt", "a") as file:
    file.write("\n")
    file.write(fakedate)

file = open("python.txt")
total_requests = sum(1 for line in file)




# Question 1: requests for each day

with open("python.txt", "r") as textfile:
    first_line = textfile.readlines()[1]
    first_datetime = first_line.split()[3]
    clean_datetime = datetime.strptime(first_datetime, '[%d/%b/%Y:%H:%M:%S')
    first_date = clean_datetime.date()
    
# begins process of extracting date from each line
file = open("python.txt", "r")
count = 0
Q1_dates = 0

for line in file:
    count += 1
    
    # removes lines without date
    if ("[" in line) != True:
        continue
    
    # searches for datetime and extracts date only
    date_str = re.search('\d{2}/\D{3}/\d{4}', line)
    clean_datetime = datetime.strptime(date_str.group(), '%d/%b/%Y')
    line_date = clean_datetime.date()
    
    delta = timedelta(days=1)
    
    if line_date == first_date:
        Q1_dates += 1
    else:
        print("There were", Q1_dates, "requests on", first_date)
        Q1_dates = 0
        first_date += delta
        
file.close()
# doesn't print requests for last date




# Question 2a: requests for each week

with open("python.txt", "r") as textfile:
    first_line = textfile.readlines()[1]
    first_datetime = first_line.split()[3]
    clean_datetime = datetime.strptime(first_datetime, '[%d/%b/%Y:%H:%M:%S')
    first_date = clean_datetime.date()
    
# begins process of extracting date from each line
file = open("python.txt", "r")
count = 0
Q2a_dates = 0

for line in file:
    count += 1
    
    # removes lines without date
    if ("[" in line) != True:
        continue
    
    # searches for datetime and extracts date only
    date_str = re.search('\d{2}/\D{3}/\d{4}', line)
    clean_datetime = datetime.strptime(date_str.group(), '%d/%b/%Y')
    line_date = clean_datetime.date()

    delta = timedelta(weeks=1)
    second_week = first_date + delta
    
    if (line_date == first_date) or (line_date < second_week):
        Q2a_dates += 1
    else: 
        print("There were", Q2a_dates, "requests on the week of", first_date.strftime("%b/%d"))
        Q2a_dates = 0
        first_date += delta
        
file.close()




# Question 2b: requests for each month

with open("python.txt", "r") as textfile:
    first_line = textfile.readlines()[1]
    first_datetime = first_line.split()[3]
    clean_datetime = datetime.strptime(first_datetime, '[%d/%b/%Y:%H:%M:%S')
    first_date = clean_datetime.date()
    first_month = first_date.month
    first_year = first_date.year
    
# begins process of extracting date from each line
file = open("python.txt", "r")
count = 0
Q2b_dates = 0

for line in file:
    count += 1
    
    # removes lines without date
    if ("[" in line) != True:
        continue
    
    # searches for datetime and extracts date only
    date_str = re.search('\d{2}/\D{3}/\d{4}', line)
    clean_datetime = datetime.strptime(date_str.group(), '%d/%b/%Y')
    line_date = clean_datetime.date()
    line_month = line_date.month
    line_year = line_date.year

    delta = relativedelta(months=1)
    
    if (line_month == first_month) and (line_year == first_year):
        Q2b_dates += 1
    else: 
        print("There were", Q2b_dates, "requests in the month of", first_date.strftime("%b/%Y"))
        Q2b_dates = 0
        first_date += delta
        first_month = first_date.month
        first_year = first_date.year

file.close()




# Question 3: percentage of unsuccessful requests 

# begins process of extracting date from each line
file = open("python.txt", "r")
count = 0
Q3_lines = 0

for line in file:
    count += 1
    
    # removes lines without status codes
    if ("[" in line) != True:
        continue
    
    status_codes = line.split()[-2]
    result = status_codes.startswith('4')
    
    if result == True:
        Q3_lines += 1
        
percent = (Q3_lines/total_requests)*100
final_percent = str(round(percent,2))
        
print("Percentage of unsuccessful requests:", final_percent)

file.close()




# Question 4: percentage of redirected requests

# begins process of extracting date from each line
file = open("python.txt", "r")
count = 0
Q4_lines = 0

for line in file:
    count += 1
    
    # removes lines without status codes
    if ("[" in line) != True:
        continue
    
    status_codes = line.split()[-2]
    result = status_codes.startswith('3')
    
    if result == True:
        Q4_lines += 1
        
percent = (Q4_lines/total_requests)*100
final_percent = str(round(percent,2))
        
print("Percentage of redirected requests:", final_percent)

file.close()




# Question 5: the most-requested file

file = open("python.txt", "r")

clean_log = []

for line in file:
    try:
        clean_log.append(line[line.index("GET")+4:line.index("HTTP")])
    except:
        pass

counter = collections.Counter(clean_log)

for count in counter.most_common(1):
    print("The most-requested file was", str(count[0]) + "and was requested", str(count[1]), "times")

file.close()




# Question 6: the least-requested file

file = open("python.txt", "r")

clean_log = []

for line in file:
    try:
        clean_log.append(line[line.index("GET")+4:line.index("HTTP")])
    except:
        pass

least_common = collections.Counter(clean_log).most_common()[-1]
print("The least-requested file was", str(least_common[0]) + "and was requested", str(least_common[1]), "time")


# Cleanup
with open("python.txt", "r+") as file:
    file.truncate(filesize)
file.close()




# Separating log file by months

log_file = "python.txt"

# creates a dictionary to hold file handles for each month
output_files = {}

# matches the month 
month_pattern = r'(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)'

# function to get the output file for a given month
def get_output_file(month):
    if month not in output_files:
        output_file_name = f"{month}_log.txt"
        output_files[month] = open(output_file_name, "w")
    return output_files[month]

# Read the log file 
with open(log_file, "r") as infile:
    for line in infile:
        # Extract the month from the line
        match = re.search(month_pattern, line)
        if match:
            month = match.group()
            output_file = get_output_file(month)
            output_file.write(line)

# Close all output files
for month, file in output_files.items():
    file.close()
